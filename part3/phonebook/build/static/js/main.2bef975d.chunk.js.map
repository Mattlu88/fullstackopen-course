{"version":3,"sources":["components/Filter.js","components/AddNewContact.js","components/ContactList.js","components/Notification.js","services/contacts.js","App.js","serviceWorker.js","index.js"],"names":["Filter","filterStr","setFilterStr","value","onChange","event","target","AddNewContact","props","handleFormSubmit","contact","setContact","onSubmit","name","required","newContact","handleNameOnChange","number","handlePhoneOnChange","type","Contact","handleDeleteContact","className","onClick","ContactList","contactList","re","RegExp","filter","match","map","key","Notification","message","notificationStyle","backgroundColor","color","border","borderColor","borderRadius","fontSize","padding","marginBottom","content","style","baseUrl","axios","get","then","response","data","post","put","id","delete","App","useState","setContactList","useEffect","contactService","initialContacts","console","log","initContact","initMessage","setMessage","showNotification","setTimeout","preventDefault","some","e","window","confirm","returnedContact","catch","error","concat","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2bef975d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Filter =({filterStr, setFilterStr}) => {\r\n  return (\r\n    <div>\r\n      <label>\r\n        filter shown with  \r\n      </label>\r\n      <input \r\n        value={filterStr}\r\n        onChange={(event)=> setFilterStr(event.target.value)}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Filter","import React from 'react'\r\n\r\nconst AddNewContact =(props) => {\r\n  const {\r\n    handleFormSubmit,\r\n    contact,\r\n    setContact\r\n  } = props\r\n\r\n  const handleNameOnChange =(name) => {\r\n    const newContact = {...contact, name: name };\r\n    setContact(newContact);\r\n  }\r\n\r\n  const handlePhoneOnChange =(number) => {\r\n    const newContact = {...contact, number: number};\r\n    setContact(newContact);\r\n  }\r\n\r\n  return (\r\n    <form onSubmit = {handleFormSubmit}>\r\n      <div>\r\n        name: <input \r\n          name='name' required \r\n          value={contact.name}\r\n          onChange={(event)=> handleNameOnChange(event.target.value)}\r\n        />\r\n      </div>\r\n      <div>\r\n        number: <input \r\n          name=\"phone\"\r\n          value={contact.number}\r\n          onChange={(event)=> handlePhoneOnChange(event.target.value)}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button type=\"submit\">add</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default AddNewContact\r\n","import React from 'react'\r\n\r\nconst ContactList =(props) => {\r\n  const {contactList, filterStr, handleDeleteContact} = props;\r\n  const re = new RegExp(filterStr, 'i');\r\n  return (\r\n    contactList.filter((contact) => \r\n        contact.name.match(re)\r\n      )\r\n      .map((contact) => \r\n        <Contact \r\n          key={contact.name}\r\n          contact={contact}\r\n          handleDeleteContact={handleDeleteContact}\r\n        />\r\n      )\r\n  )\r\n}\r\n\r\nconst Contact = ({contact, handleDeleteContact}) => {\r\n  return (\r\n    <div>\r\n      <p className='contact'>\r\n        {contact.name} {contact.number}\r\n        <button \r\n          onClick={() => handleDeleteContact(contact)}\r\n        > delete\r\n        </button>\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ContactList","import React from 'react'\r\n\r\nconst Notification =({message}) => {\r\n\r\n  const notificationStyle = {\r\n    backgroundColor: 'silver',\r\n    color: 'green',\r\n    border: 'solid',\r\n    borderColor: 'green',\r\n    borderRadius: 5,\r\n    fontSize: 20,\r\n    padding: 10,\r\n    marginBottom: 10\r\n  }\r\n\r\n  if (message.content === null) {\r\n    return null;\r\n  }\r\n\r\n  if (message.type === 'error') {\r\n    notificationStyle.color = 'red';\r\n  } else {\r\n    notificationStyle.color = 'green';\r\n  }\r\n\r\n  return (\r\n    <div style={notificationStyle}> \r\n      {message.content}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification","import axios from 'axios'\r\n\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll =() => {\r\n  const request = axios.get(baseUrl);\r\n  return request.then(response => response.data);\r\n}\r\n\r\nconst create =(newContact) => {\r\n  const request = axios.post(baseUrl, newContact);\r\n  return request.then(response => response.data);\r\n}\r\n\r\nconst updateContact =(contact) => {\r\n  const request = axios.put(`${baseUrl}/${contact.id}`, contact);\r\n  return request.then(response => response.data);\r\n}\r\n\r\nconst deleteContact =(contact) => {\r\n  const request = axios.delete(`${baseUrl}/${contact.id}`, {data: contact})\r\n  return request.then(response => response.data);\r\n}\r\n\r\nexport default {getAll, create, updateContact, deleteContact}","import React, {useState, useEffect} from 'react';\nimport Filter from './components/Filter'\nimport AddNewContact from './components/AddNewContact'\nimport ContactList from './components/ContactList'\nimport Notification from './components/Notification'\nimport contactService from './services/contacts'\n\n\nconst App =() => {\n\n  const [contactList, setContactList] = useState([])\n  \n  useEffect(() => {\n    contactService\n      .getAll()\n      .then(initialContacts => {\n        console.log(initialContacts)\n        setContactList(initialContacts);\n      });\n  }, []);\n\n  const initContact = {\n    name: '',\n    number: ''\n  }\n\n  const initMessage = {\n    content: null,\n    type: null\n  }\n\n  const [contact, setContact] = useState(initContact)\n  const [filterStr, setFilterStr] = useState('')\n  const [message, setMessage] = useState(initMessage)\n\n  const showNotification =(content, type) => {\n    const newMessage = {content, type};\n    setMessage(newMessage);\n    setTimeout(() =>\n      { setMessage(initMessage) },\n      5000\n    );\n  }\n\n  const handleFormSubmit =(event) => {\n    event.preventDefault();\n    if (contactList.some((e) => e.name === contact.name)) {\n      if (window.confirm(\n        `${contact.name} is already added to the phonebook, ` +\n        `replace the old number with a new one?`)) {\n      const newContact = {...contact, \n        id:contactList.filter(e => e.name === contact.name)[0].id };\n      contactService\n        .updateContact(newContact)\n        .then(returnedContact => {\n          setContactList(contactList.map(e =>\n            e.name === returnedContact.name ? returnedContact : e));\n        })\n        .catch(error => {\n          showNotification(`${error.response.data}`);\n        });\n    }} else {\n      contactService\n        .create(contact)\n        .then(returnedContact => {\n           setContactList(contactList.concat(returnedContact));\n           showNotification(`Added ${returnedContact.name}`, 'into');\n        })\n        .catch(error => {\n          console.log(error.response);\n          showNotification(`${error.response.data}`);\n        });\n    }\n    setContact(initContact);\n  }\n\n  const handleDeleteContact =(contact) => {\n    if (window.confirm(`Delete ${contact.name}`)) {\n      contactService\n        .deleteContact(contact)\n        .then(setContactList(\n          contactList.filter(e => e.id !== contact.id)));\n    }\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification \n        message={message}\n      />\n      <Filter \n        filterStr={filterStr}\n        setFilterStr={setFilterStr}\n      />\n      <h2>Add a new</h2>\n      <AddNewContact\n        handleFormSubmit={handleFormSubmit}\n        contact={contact}\n        setContact={setContact}\n      />\n      <h2>Numbers</h2>\n      <ContactList \n        contactList={contactList}\n        filterStr={filterStr}\n        handleDeleteContact={handleDeleteContact}\n      />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}